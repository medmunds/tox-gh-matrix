name: test

on:
  pull_request:
  push:
    branches: [ "main", "v[0-9]*" ]
    tags: [ "v[0-9]*" ]
  workflow_dispatch:
  schedule:
    # Weekly test (on branch main) every Tuesday at 08:00 UTC.
    # (Used to monitor compatibility with tox releases and other dependencies.)
    - cron: "0 8 * * 2"

jobs:
  get-envlist:
    runs-on: ubuntu-latest
    outputs:
      envlist: ${{ steps.generate-envlist.outputs.envlist }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install tox-gh-matrix
        run: |
          # If your project is *not* tox-gh-matrix itself, use this instead:
          #   python -m pip install tox tox-gh-matrix
          python -m pip install tox .
          tox --version
      - name: Generate tox envlist
        id: generate-envlist
        run: python -m tox --gh-matrix
        env:
          # Must run coverage after all other jobs, so omit from envlist here:
          TOX_SKIP_ENV: coverage
      - name: Generate tox envlist (formatted JSON)
        # Not required, but helpful for seeing the generated JSON:
        run: python -m tox --gh-matrix-dump

  test:
    runs-on: ubuntu-latest
    needs: get-envlist
    strategy:
      matrix:
        tox: ${{ fromJSON(needs.get-envlist.outputs.envlist) }}
      fail-fast: false
    name: ${{ matrix.tox.name }} ${{ matrix.tox.ignore_outcome && 'allow-failures' || '' }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Capture system Python version
        id: default-python
        run: |
          # Set outputs.version to N.M Python version
          python -c 'import sys; N, M = sys.version_info[:2]; print(f"version={N}.{M}")' >> $GITHUB_OUTPUT
      - name: Setup tox Python ${{ matrix.tox.python.version }}
        if: matrix.tox.python.spec && ! matrix.tox.python.installed
        # Ensure matrix Python version is installed and available for tox
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.tox.python.spec }}
      - name: Restore system Python
        if: matrix.tox.python.spec && ! matrix.tox.python.installed
        # Use a original system version of Python to run tox itself
        uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.default-python.outputs.version }}
      - name: Install tox
        run: python -m pip install tox
      - name: Test ${{ matrix.tox.name }}
        run: |
          python --version
          python -m tox -e ${{ matrix.tox.name }}
        continue-on-error: ${{ matrix.tox.ignore_outcome == true }}
        env:
          TOX_OVERRIDE_IGNORE_OUTCOME: false
      - name: Store coverage data
        # Capture the coverage.py parallel-mode data file
        # (generated by `pytest --cov` in tox.ini [testenv])
        # for tox testenvs that generate coverage data.
        if: matrix.tox.name != 'fix_lint' && matrix.tox.name != 'package_description'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .tox/.coverage.*
          if-no-files-found: error
          retention-days: 1

  coverage:
    # Combine the .coverage.* files captured during test jobs
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Generate version.py
        # Coverage report requires full source code, including version.py
        # generated by setuptools_scm during package setup. Since setup
        # doesn't happen here, call setuptools_scm directly.
        run: |
          python -m pip install setuptools_scm
          python -m setuptools_scm
      - name: Load coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data
          path: .tox
      - name: Show loaded coverage data
        # (for workflow debugging)
        run: ls -Rla .tox
      - name: Install tox
        run: python -m pip install tox
      - name: Get diff-against code
        # Required for diff-cover command in coverage report
        run: git fetch origin main:refs/remotes/origin/main
      - name: Generate coverage report
        run: python -m tox -e coverage
      - name: Store coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: .tox/coverage.xml
          if-no-files-found: error
